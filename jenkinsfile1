pipeline {
      agent {
            dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker'
                label 'Docker-enabled'
            }
        }
     environment {
        sfcc_ClientId  = credentials('CLIENT_ID')
        sfcc_Client_Secret  = credentials('CLIENT_SECRET')
	dev_env = "bgtm-024.sandbox.us01.dx.commercecloud.salesforce.com"
       }
    stages {
       stage('BUILD') {
	        steps {
		    script {
		        try {
                    dir('sfra-webpack-builder/') {
                        echo "sh('npm install')" 
			echo "sh('npm run npm Install')"
			echo "sh('npm run dev')" 
			CodeVersion = getCommit()
                        echo "##########${CodeVersion}########"
           	    }
		   }catch (e) {   
                           currentBuild.result="FAILED"
                           throw e
                    } 
		 }
	      }	 
            }
      stage('Authorize DevHub') {
             steps{
	       script {
		  rc = command 'sfcc-ci client:auth ${sfcc_ClientId} ${sfcc_Client_Secret}'
		  if (rc != 0) {
                   error 'Salesforce dev hub org authorization failed.'
                     }
		}  
	    }	
        }
  stage('Deploys CodeVersion') {
          steps{
		script {
			echo "#####Initiating Deployment to Commerce Cloud instance#####"
			echo "In Deploy Stage##########${CodeVersion}########"
			rc = command "sfcc-ci code:deploy ${CodeVersion}.zip -i ${dev_env}"
		        if (rc != 0) {
                           error 'Commerce Cloud instance deployment failed.'
                     	}
			echo "################SUCCESSFULLY DEPLOYED################"
		  }
              }	   
	  }	
 /*    stage('Activate CodeVersion') {
           steps{
		script {
			echo "#####ACTIVATE CODEVERSION#####"
			rc = command 'sfcc-ci code:activate ${CodeVersion} -i your-instance.demandware.net'
		        if (rc != 0) {
                           error 'CodeVersion Activation Failed.'
                     	}
			echo "######SUCCESSFULLY ACTIVATED#####"
		  }
       		 }	   
	  } 
       stage('Data Upload') {
          steps{
		script {
			echo "#####Initiating Data Upload#####"
			rc = command 'sfcc-ci instance:upload <path/to/data.zip> -i your-instance.demandware.net'
		        if (rc != 0) {
                           error 'Data Upload failed.'
                     	}
			echo "######SUCCESSFULLY DATA UPLOADED#####"
		  }
             }	   
	  }	
      stage('Data Import') {
          steps{
		script {
			echo "#####Initiating Data Import#####"
			rc = command 'sfcc-ci instance:import <data.zip> -i your-instance.demandware.net -s'
		        if (rc != 0) {
                           error 'Data Import failed.'
                     	}
			echo "######SUCCESSFULLY DATA IMPORTED#####"
		  }
      	      }	   
	  } */  	  
    }
    
        post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post
      Always post somewhere the watermark:
  	- md5sum of Jenkinsfile
  	- Output of the Jenkinsfile checker output
      */
      success {
      notifyBuild('Pipeline-Build Job success')
      cleanWs()
      }
      failure {
     	notifyBuild('Pipeline-Build Job Failed')
        cleanWs()
      }
      unstable {
        cleanWs()
      }
    }       
}

def notifyBuild(def buildStatus = currentBuild.result) {
    echo "######${buildStatus}######"

}
def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }	 
}
String getCommit() {
return sh(script: 'git rev-parse --short HEAD', returnStdout: true)?.trim()
}

